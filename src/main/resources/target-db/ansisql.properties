#########################################
## ANSI SQL CONVERSION CONFIGURATION
#########################################

# Table name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.tableName  = snake_case 

# Column name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.columnName = snake_case

# Primary Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.pkName = snake_case

# Foreign Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.fkName = snake_case


#########################################
# Neutral type to SQL type
# see : https://en.wikipedia.org/wiki/SQL_syntax
# for auto-increment see : https://dba.stackexchange.com/questions/164862/ansi-sql-auto-numbered-column
#########################################

# CHAR(%s)    
# NCHAR(%s)
# NVARCHAR(%s)
type.string = VARCHAR(%s)

# No tinyint => smallint
type.byte          = SMALLINT
type.byte.autoincr = SMALLINT GENERATED ALWAYS AS IDENTITY

# SMALLINT 
type.short          = SMALLINT
type.short.autoincr = SMALLINT GENERATED ALWAYS AS IDENTITY

# INTEGER (or INT)
type.int           = INT
type.int.autoincr  = INT GENERATED ALWAYS AS IDENTITY

# BIGINT 
type.long          = BIGINT
type.long.autoincr = BIGINT GENERATED ALWAYS AS IDENTITY

# NUMERIC(precision, scale) or DECIMAL(precision, scale)
type.decimal   = NUMERIC(%p) 
type.decimal.autoincr = NUMERIC(%p) 

# FLOAT, REAL and DOUBLE PRECISION
type.float     = FLOAT
type.double    = DOUBLE PRECISION

# The BOOLEAN data type can store the values TRUE and FALSE
type.boolean   = BOOLEAN

# DATE : for date values (e.g. 2011-05-03).
type.date      = DATE

# TIME : for time values (e.g. 15:51:36). 
# TIME WITH TIME ZONE: the same as TIME, but including details about the time zone in question.
type.time      = TIME

# TIMESTAMP: DATE and TIME put together in one variable (e.g. 2011-05-03 15:51:36.123456).
# TIMESTAMP WITH TIME ZONE: the same as TIMESTAMP, but including details about the time zone in question
type.timestamp = TIMESTAMP

# BINARY(n)
# VARBINARY(n)
type.binary    = VARBINARY(%s)
  
