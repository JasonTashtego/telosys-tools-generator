${SHARP} OpenAPI 3.0.3 specification documentation: https://spec.openapis.org/oas/v3.0.3
${SHARP} File generated by Telosys $now.date ( $now.time ) from model "$model.name"
## -------
#parse("commons/macros.vm")
#set($apiRootPath = "/api/v1" )
## -------
openapi: 3.0.3

info:
  description: "API du dossier de surface"
  version: "$model.version"
  title: $model.title

paths:
#foreach( $entity in $selectedEntities )
## ----------------------------------------------------------------------
## INIT ENTITY
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() ) 
#error("Composite Primary Key not supported in REST API")
#end
## --- Set default values 
#set( $apiResourcePath = "/${entity.name.toLowerCase()}" )
#set( $apiResourceId = "id")
#set( $sortEnum = "" )
#set( $sortDefault = "")
## --- Set entity Open API variables from file if any
#set( $file = $fn.fileFromModel("${entity.name}-openapi.vm") )
#if( $file.exists() )#evaluate( $file.loadContent() )#end
## --- Define resource id 
#setOpenApiTypeAndFormat($entity.keyAttribute)
## ----------------------------------------------------------------------
  ${apiRootPath}${apiResourcePath}:
## ----------------------------------------------------------------------
    get:
      summary: Récupérer la liste des entités $entity.name
      operationId: find${entity.name}
      parameters:
      - name: page
        in: query
        description: Numéro de la page à afficher
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: size
        in: query
        description: Nombre d'elements par page
        schema:
          type: integer
          minimum: 1
          maximum: 10
          default: 10
      - name: sort
        in: query
        description: Champs avec lesquels trier le resultat
        schema:
          type: string
#if($sortEnum != "")
          enum: [$sortEnum]
#end
#if($sortDefault != "")
          default: $sortDefault
#end
      - name: order
        in: query
        description: Ordre de tri du resultat
        schema:
          type: string
          enum: [asc, desc]
          default: asc
      responses:
        200:
          description: La liste des $entity.name
          content:
            application/json:
              schema:
                type: array
                items:
                  ${DOLLAR}ref: "definitions.yaml#/definitions/${entity.name}"

## ----------------------------------------------------------------------
    post:
      summary: Creer nouveau $entity.name
      operationId: insert${entity.name}
      requestBody:
        description: ${entity.name} à insérer
        required: true
        content:
          application/json:
            schema:
              ${DOLLAR}ref: 'definitions.yaml#/definitions/${entity.name}'
      responses:
        201:
          description: ${entity.name} a été inséré


## ----------------------------------------------------------------------
  ${apiRootPath}${apiResourcePath}/${LBRACE}${apiResourceId}${RBRACE}:
## ----------------------------------------------------------------------
    get:
      summary: Récupération de toutes les informations d'une occurrence de $entity.name
      operationId: get${entity.name}
      parameters:
      - name: ${apiResourceId}
        in: path
        description: Identifiant de ${entity.name}
        required: true
        schema:
          type: $openApiType
#if ( $openApiFormat != "" ) 
          format: $openApiFormat
#end
      responses:
        200:
          description: Informations de l'occurrence demandée
          content:
            application/json:
              schema:
                ${DOLLAR}ref: 'definitions.yaml#/definitions/${entity.name}'

## ----------------------------------------------------------------------
    put:
      summary: Mise à jour d'une occurrence de ${entity.name} existant (ou création si inexistante)
      operationId: update${entity.name}
      parameters:
      - name: ${apiResourceId}
        in: path
        description: Identifiant de ${entity.name}
        required: true
        schema:
          type: $openApiType
#if ( $openApiFormat != "" ) 
          format: $openApiFormat
#end
      requestBody:
        description: ${entity.name} à mettre à jour ou à insérer
        required: true
        content:
          application/json:
            schema:
                ${DOLLAR}ref: 'definitions.yaml#/definitions/${entity.name}'
      responses:
        200:
          description: ${entity.name} a été mis à jour
        201:
          description: ${entity.name} a été inséré

## ----------------------------------------------------------------------
    delete:
      summary: Supprimer une occurrence de ${entity.name} 
      operationId: delete${entity.name}
      parameters:
      - name: ${apiResourceId}
        in: path
        description: Identifiant de ${entity.name}
        required: true
        schema:
          type: $openApiType
#if ( $openApiFormat != "" ) 
          format: $openApiFormat
#end
      responses:
        200:
          description: L'occurrence de ${entity.name} à été supprimée

#end## #foreach( $entity )
